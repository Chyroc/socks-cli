
# If the script itself is evaluated by `source`, when executing `cd` in a subshell
# under the Terminal.app on macOS 10.11+, some unexpected output will pop up.
# So we override the shell_session_update function in order to suppress the garbage.
# Dig into /etc/bashrc_Apple_Terminal for more details.
CURRENT_DIR="$( shell_session_update() { :; }; cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "${CURRENT_DIR}/socksproxyenv"
if [ "${SOCKS_PROXY}" = "" ]; then
    echo "Error: 'socksproxyenv' didn't provide the SOCKS_PROXY env var!"
else
    # Reload
    if [ "${_socks_git}" = "1" ]; then
        source "${CURRENT_DIR}/deactivate"
    fi

    export _socks_git=1
    export _socks_git_GIT_PROXY_COMMAND="${GIT_PROXY_COMMAND}"
    export _socks_git_GIT_SSH="${GIT_SSH}"
    export _socks_git_ALL_PROXY="${ALL_PROXY}"
    export _socks_git_PS1="$PS1"

    # Prompt that socks-git is activated
    PS1_PREFIX=$'\e[0;32msocks-git\e[0m '
    if [ ! -z "$BASH" ]; then
        # Bash needs \[ and \] to surround non-printing characters:
        #   http://www.gnu.org/software/bash/manual/html_node/Controlling-the-Prompt.html
        PS1_PREFIX=$'\[\e[0;32m\]socks-git\[\e[0m\] '
    fi
    export PS1=$PS1_PREFIX$PS1

    BEFORE_ENV="$(env)"

    # For "git" protocol
    export GIT_PROXY_COMMAND="${CURRENT_DIR}/socks5proxywrapper" 
    # For "ssh" protocol
    export GIT_SSH="${CURRENT_DIR}/socks5proxyssh"
    # For "http/https" protocol
    export ALL_PROXY="socks5h://${SOCKS_PROXY}"

    AFTER_ENV="$(env)"

    echo "Done! Some environment variables have been changed to:"
    echo "$(diff --unchanged-line-format="" --old-line-format="" --new-line-format="  %L" <(echo "${BEFORE_ENV}") <(echo "${AFTER_ENV}"))"
    echo ""
fi
